Currently the way I am structuring the files do not scale that well.
Ideally I would like to isolate view-type components and view-specific
UI building blocks a bit better, but can't really land on a solution I
actually like.

The admissions module is the largest one. One could argue that the module
actually should be split into more modules, but I like having everything
pertaining to the admissions process in one place.

The discussion then evolves to how this ideally should be organized.
Currently there is a sub-module division by folder where each sub-folder
is selfconained with its logic. The top level view component is then
exported as a kind-of pulic API and then imported to AuthRoutes.

I also can't really seem to land on how to structure utility
files like 'utils.ts', 'types.ts', 'mutations.hooks.ts' etc.
Should all these be shared on the module top level, even if
they are only used within a specific view/component or
scope them within the views? I find the latter a bit
too fragmented and does not scale well when a module
has a lot of views and moving parts.

Using modules/admissions/ as an example I consider the following
refactoring.

=== EXAMPLE 1 ===
admissions/
  components/
    ApplicantPortal/
      InterviewBooking.tsx
      SetPriorities.tsx
      ...
    AdmissionDashboard/
      ShortutPanel.tsx
      InternalGroupNav.tsx
      ...
    InternalGroupDiscussion/
    InternalGroupApplicants/
    Interview/
    InterviewEdit/
    DiscussionDashboard/
    ConfigureAdmission/
    InternalGroupDiscussion/

  views/
    ApplicantPortal.tsx
    AdmissionDashboard.tsx
    InternalGroupDiscussion.tsx
    InternalGroupApplicants.tsx
    Interview.tsx
    InterviewEdit.tsx
    DiscussionDashboard.tsx
    ConfigureAdmission.tsx
    InternalGroupDiscussion.tsx
    index.ts

  types.ts
  types.graphql.ts
  utils.ts
  mutations.hooks.ts
  queries.ts


My other proposal is to move components into folders inside views and each view is a folder.
Each view has its view compnent as a default export?

=== EXAMPLE 2 ===
admissions/
  views/
    ApplicantPortal/
      components/
        InterviewBooking.tsx
        SetPriorities.tsx

      ApplicantPortal.tsx
      mutations.hooks.ts # Can we do individual files like this here as well or all in root?
      types.graphql.ts

    AdmissionDashboard/
    InternalGroupDiscussion/
    InternalGroupApplicants/
    Interview/
    InterviewEdit/
    DiscussionDashboard/
    ConfigureAdmission/
    InternalGroupDiscussion/

  types.ts
  types.graphql.ts
  utils.ts
  mutations.hooks.ts
  queries.ts